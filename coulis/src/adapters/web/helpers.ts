import { isObject } from "../../core/entities/primitive";
import type {
	RecordLike,
	WithNewLeafNodes,
} from "../../core/entities/primitive";
import { SHORTHAND_PROPERTIES, UNITLESS_PROPERTIES } from "./constants";

/**
 * Escape invalid CSS characters to generate usable property names.
 * @param input - The input to escape with potentially some unsafe characters.
 * @returns The escaped input.
 * @see https://mathiasbynens.be/notes/css-escapes
 * @example
 * const safeCssVariable = escape("--spacings-1.5"); // Will generate `--spacings-1\5`
 */
export const escape = (input: string) => {
	return input.replaceAll(/[!"#$%&'()*+,./:;<=>?@[\]^`{|}~]/g, "-");
};

export const createClassName = (input: string) => {
	// hash content based with FNV-1a algorithm:
	const FNVOffsetBasis = 2166136261;
	const FNVPrime = 16777619;
	let hashedValue = FNVOffsetBasis;

	for (let index = 0; index < input.length; index++) {
		const characterUnicodeValue = input.codePointAt(index);

		if (!characterUnicodeValue) continue;

		hashedValue ^= characterUnicodeValue;
		hashedValue *= FNVPrime;
	}

	/*
	 * We convert hashed value to 32-bit unsigned integer
	 * via logical unsigned shift operator >>>
	 */
	const uHash = hashedValue >>> 0;

	/*
	 * A coulis className is generated by prefixing with "c"
	 * and converting generated hash to hexadecimal
	 */
	return `c${Number(uHash).toString(16)}`;
};

export const createCustomProperties = <Theme extends RecordLike>(
	theme: Theme,
	onCreateProperty: (name: string, value: unknown) => void,
	customPropertyNameParts: (keyof Theme)[] = [],
	output: WithNewLeafNodes<Theme, string> = {} as typeof output,
) => {
	const tokenNames = Object.keys(theme) as (keyof typeof output)[];

	for (const tokenName of tokenNames) {
		const value = theme[tokenName];

		customPropertyNameParts.push(tokenName);

		// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
		output[tokenName] = {} as (typeof output)[keyof typeof output];

		if (isObject(value)) {
			createCustomProperties(
				value as Theme,
				onCreateProperty,
				customPropertyNameParts,
				output[tokenName] as unknown as typeof output,
			);
			customPropertyNameParts = [];

			continue;
		}

		const name = `--${escape(customPropertyNameParts.join("-"))}`;

		output[tokenName] =
			`var(${name})` as (typeof output)[keyof typeof output];
		onCreateProperty(name, value);
		customPropertyNameParts.pop();
	}

	return output;
};

export const createDeclaration = ({
	name,
	value,
}: {
	name: keyof RecordLike;
	value: RecordLike[keyof RecordLike];
}) => {
	// From JS camelCase to CSS kebeb-case
	const transformedPropertyName = name.replaceAll(
		/([A-Z])/g,
		(matched) => `-${matched.toLowerCase()}`,
	);

	// Format value to follow CSS specs (unitless number)
	const transformedPropertyValue =
		typeof value === "string" || UNITLESS_PROPERTIES.has(name)
			? String(value)
			: `${String(value)}px`;

	return `${transformedPropertyName}:${transformedPropertyValue};`;
};

export const createDeclarationBlock = (properties: RecordLike) => {
	let declarationBlock = "";
	const propertyNames = Object.keys(properties);

	for (const propertyName of propertyNames) {
		const value = properties[propertyName];

		if (value === undefined) continue;

		declarationBlock += createDeclaration({
			name: propertyName,
			value,
		});
	}

	return declarationBlock;
};

export const isShorthandProperty = (input: string) => {
	return SHORTHAND_PROPERTIES.has(input);
};

export const minify = (input: string) => {
	return input.replaceAll(/\s{2,}|\s+(?={)|\r?\n/gm, "");
};
