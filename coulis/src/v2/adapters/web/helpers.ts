import type { StyleProperties } from "../../core/entities/style";
import type { RecordLike } from "../../core/entities/primitive";
import { UNITLESS_PROPERTIES } from "./constants";

export const createId = (input: RecordLike) => {
	return createClassName(JSON.stringify(input));
};

export const isNumber = (value: unknown): value is number => {
	return typeof value === "number" || !Number.isNaN(Number(value));
};

export const createDeclaration = ({
	name,
	value,
}: {
	name: keyof StyleProperties;
	value: StyleProperties[keyof StyleProperties];
}) => {
	// From JS camelCase to CSS kebeb-case
	const transformedPropertyName = name.replaceAll(
		/([A-Z])/g,
		(matched) => `-${matched.toLowerCase()}`,
	);

	// Format value to follow CSS specs (unitless number)
	const transformedPropertyValue =
		typeof value === "string" || UNITLESS_PROPERTIES[name]
			? String(value)
			: `${String(value)}px`;

	return `${transformedPropertyName}:${transformedPropertyValue};`;
};

export const createDeclarations = <Properties extends StyleProperties>(
	properties: Properties,
) => {
	let declarationBlock = "";
	const propertyNames = Object.keys(properties) as (keyof StyleProperties)[];

	for (const propertyName of propertyNames) {
		const value = properties[propertyName];

		if (value) {
			declarationBlock += createDeclaration({
				name: propertyName,
				value,
			});
		}
	}

	return declarationBlock;
};

const createClassName = (value: string) => {
	// hash content based with FNV-1a algorithm:
	const FNVOffsetBasis = 2166136261;
	const FNVPrime = 16777619;
	let hashedValue = FNVOffsetBasis;

	for (let index = 0; index < value.length; index++) {
		const characterUnicodeValue = value.codePointAt(index);

		if (!characterUnicodeValue) continue;

		hashedValue ^= characterUnicodeValue;
		hashedValue *= FNVPrime;
	}

	/*
	 * We convert hashed value to 32-bit unsigned integer
	 * via logical unsigned shift operator >>>
	 */
	const uHash = hashedValue >>> 0;

	/*
	 * A coulis className is generated by prefixing with "c"
	 * and converting generated hash to hexadecimal
	 */
	return `c${Number(uHash).toString(16)}`;
};
