import { UNITLESS_PROPERTIES } from "./constants";
import type { Scope } from "./entities/scope";
import type { StyleObject } from "./types";

export const hash = (str: string) => {
	// hash content based with FNV-1a algorithm:
	const FNVOffsetBasis = 2166136261;
	const FNVPrime = 16777619;
	let hashedValue = FNVOffsetBasis;

	for (let i = 0; i < str.length; i++) {
		hashedValue ^= str.charCodeAt(i);
		hashedValue *= FNVPrime;
	}

	// We convert hashed value to 32-bit unsigned integer
	// via logical unsigned shift operator >>>
	const uHash = hashedValue >>> 0;

	// A coulis className is generated by prefixing with "c"
	// and converting generated hash to hexadecimal
	return `c${Number(uHash).toString(16)}`;
};

export const isNumber = (value: unknown): value is number => {
	return typeof value === "number" || !Number.isNaN(Number(value));
};

export const isObject = (value: unknown): value is Record<string, unknown> => {
	return value !== null && typeof value === "object";
};

export const toDeclaration = (property: string, value: number | string) => {
	/**
	 * CSS syntax anatomy.
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax
	 *
	 * `.className { background-color: blue; color: red }` = Rule (or Ruleset)
	 * `.className` = Selector
	 * `{ background-color: blue; color: red }` = Declaration block (contains one or more declarations separated by semicolons)
	 * `background-color: blue;` = Declaration
	 * `background-color` = Property (or property name)
	 * `blue = Value` (or property value)
	 */

	// From JS camelCase to CSS kebeb-case
	const normalizedProperty = property.replace(
		/([A-Z])/g,
		(matched) => `-${matched.toLowerCase()}`,
	);

	// Format value to follow CSS specs (unitless number)
	const normalizedValue =
		typeof value === "string" || UNITLESS_PROPERTIES[property]
			? value
			: `${value}px`;

	return `${normalizedProperty}:${normalizedValue};`;
};

export const toManyDeclaration = <Style extends StyleObject>(
	styleObject: Style,
) => {
	let declarationBlock = "";

	for (const property of Object.keys(styleObject)) {
		const value = styleObject[property];

		if (value) {
			declarationBlock += toDeclaration(property, value);
		}
	}

	return declarationBlock;
};

export const process = ({
	key,
	createRules,
	scope: { cache, styleSheet },
}: {
	key: string;
	createRules: (className: string) => string[];
	scope: Scope;
}) => {
	const className = hash(key);

	if (cache.has(className)) return className;

	const rules = createRules(className);

	for (const rule of rules) {
		styleSheet.commit(rule);
	}

	cache.add(className);

	return className;
};
